{"version":3,"sources":["helpers/data.helpers.ts","services/http.service.ts","services/config.service.ts","common/models/config.model.ts","common/models/states.model.ts","components/app.context.ts","components/withContext/withContext.comp.tsx","components/loader/loader.comp.tsx","helpers/pagination.helpers.ts","components/button/button.comp.tsx","components/infiniteLoader/infiniteLoader.comp.tsx","components/pagination/pagination.comp.tsx","components/table/table.comp.tsx","components/cards/cards.comp.tsx","components/formRow/formRow.comp.tsx","components/queryParams/queryParams.comp.tsx","components/popup/popup.comp.tsx","helpers/file.helpers.ts","components/formPopup/formPopup.comp.tsx","components/filterField/filterField.comp.tsx","components/page/page.comp.tsx","components/navigation/navigation.comp.tsx","components/customStyles/customStyles.comp.tsx","components/app.tsx","serviceWorker.ts","index.tsx"],"names":["dataHelpers","data","dataPath","attr","extractedData","digProps","split","prop","field","type","arrayType","HttpService","baseUrl","unauthorizedRedirectUrl","errorMessageDataPath","requestHeaders","this","url","indexOf","rawData","outputUrl","Object","keys","forEach","key","urlParamName","replace","queryParams","length","replaceParamsInUrl","params","param","name","value","urlReplaceOnly","push","firstSeparator","join","reqUrl","urlIsAbsolute","origUrl","buildUrl","method","toUpperCase","headers","assign","body","undefined","res","errorMessage","json","path","dataAtPath","extractDataByDataPath","status","statusText","redirectUrl","encodeURIComponent","document","location","href","Error","getErrorMessage","responseType","fetch","ok","text","handleError","buildRequest","makeRequest","httpService","HTTPService","endsWith","import","default","getRemoteConfig","config","isValid","configSchema","require","validate","Ajv","allErrors","verbose","compile","firstError","errors","message","console","error","isQueryPagination","obj","source","isJSONBodyPagination","isQueryPaginationState","isJSONBodyPaginationState","AppContext","React","createContext","activePage","setError","setActivePage","withAppContext","Component","props","Consumer","context","Loader","className","paginationHelpers","page","parseInt","_page","_itemsPerPage","_total","Button","color","children","InfiniteLoader","Pagination","callbacks","pagination","customLabels","previousTitle","previousPageTitle","nextTitle","nextPageTitle","disabled","hasPreviousPage","onClick","previousPage","title","aria-hidden","hasNextPage","nextPage","Table","items","fields","customActions","editLabel","buttons","editItem","deleteLabel","deleteItem","actionColumnHeader","tableColumnHeaders","actions","paginationCallbacks","getNextPage","getPreviousPage","renderTableRow","item","rowIdx","map","fieldIdx","truncate","origField","origItem","src","alt","label","fieldValue","target","rel","urlLabel","style","backgroundColor","JSON","stringify","renderTableCell","put","call","action","idx","icon","delete","renderTableContent","useEffect","clientHeight","window","innerHeight","dataLength","next","hasMore","loader","Cards","renderActions","cardIdx","renderCard","Fragment","renderRow","renderCardSkeleton","duration","startingIndex","Array","from","limit","renderSkeletons","FormRow","direction","showReset","onChange","useState","optionSources","setOptionSources","pageHeaders","addArrayItemLabel","addArrayItem","clearLabel","clearInput","renderArrayItems","originalField","array","itemIdx","inputField","renderFieldInput","fieldName","updatedArray","localValue","splice","removeItemToFieldArray","aria-label","e","preventDefault","addItemToFieldArray","changeCallback","inputProps","defaultPlaceholder","placeholder","readonly","required","checked","optionSource","a","async","actualMethod","result","optionSourceData","option","valuePath","displayPath","display","toast","loadOptionSourceFromRemote","sortBy","finalOptions","options","sortedOptions","orderBy","placeholders","object","number","valueAsNumber","email","password","accept","file","date","originalName","QueryParams","initialParams","paginationConfig","submitCallback","setQueryParams","submit","formChanged","submitAfterChange","updatedQueryParams","filteredParams","filter","includes","onSubmit","queryParam","portalRoot","getElementById","createElement","setAttribute","append","PortalPopup","el","componentDidMount","appendChild","componentWillUnmount","removeChild","ReactDOM","createPortal","Popup","_handleKeyDown","show","closeCallback","keyCode","closeLabel","closeForm","ref","refCallback","addEventListener","bind","removeEventListener","fileHelpers","fieldIndex","flatten","unflatten","FormPopup","getSingleConfig","methodConfig","fieldsCopy","parse","loading","setLoading","formFields","setFormFields","finalRawData","setFinalRawData","submitForm","finalObject","includeOriginalFields","formData","FormData","containFiles","isMultipartForm","validationError","checkIfFieldIsObject","fileInput","querySelector","files","firstFile","success","updatedFormFields","flattenData","initFormFields","FilterField","toLowerCase","buildInitQueryParamsAndPaginationState","initQueryParams","initialPagination","descending","find","previous","Page","useParams","useHistory","pageMethods","methods","getAllConfig","getAll","infiniteScroll","getSingle","postConfig","post","putConfig","deleteConfig","addItemLabel","addItem","addItemFormTitle","formTitles","editItemFormTitle","openedPopup","setOpenedPopup","setPagination","setItems","setFilter","openEditPopup","updateItem","openCustomActionPopup","performAction","fetchPageData","isArray","dataTransform","orderedItems","total","newPaginationState","getUpdatedPaginationState","getAllRequest","confirm","updatedParams","remove","submitQueryParams","reset","paramsToUrl","queryState","newState","nextPath","prevPath","countPath","nextActivePage","pages","p","pIdx","id","parsedParams","QueryString","search","finalQueryParams","decodeURIComponent","extractQueryParams","description","fieldsToFilter","filterable","currentCountFrom","currentCountTo","itemsCount","renderPaginationStateLabel","filteredItems","passFilter","newPage","renderItemsUI","renderPageContent","refreshData","Navigation","isOpened","setIsOpened","to","activeClassName","CustomStyles","cssVars","styles","vars","arr","dangerouslySetInnerHTML","__html","defaultAppName","changeFavicon","link","oldLink","head","App","firstLoad","setFirstLoad","setConfig","appName","loadConfig","windowConfig","RESTool","remoteConfig","ConfigService","loadDefaultConfig","favicon","remoteUrl","validateConfig","Provider","customStyles","scrollDuration","cosParameter","scrollY","scrollCount","oldTimestamp","performance","now","requestAnimationFrame","step","newTimestamp","Math","PI","scrollTo","round","cos","scrollToTop","exact","component","position","POSITION","TOP_CENTER","autoClose","draggable","Boolean","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b234d68e.chunk.js","sourcesContent":["import { IConfigInputField } from \"../common/models/config.model\";\n\nclass DataHelpers {\n\n  public extractDataByDataPath(data: any, dataPath: string, attr: string | null = null) {\n    if (!data || !dataPath) {\n      if (attr) {\n        return data[attr];\n      }\n      return data;\n    }\n    \n    let extractedData: any = data;\n    const digProps: string[] = dataPath.split('.');\n\n    for (let prop of digProps) {\n      if (typeof extractedData[prop] !== 'undefined') {\n        extractedData = extractedData[prop];\n      } else {\n        return null;\n      }\n    }\n\n    if (typeof extractedData === 'undefined') {\n      return null;\n    }\n\n    if (attr) {\n      return extractedData[attr];\n    }\n\n    return extractedData;\n  }\n\n  public checkIfFieldIsObject(field: IConfigInputField): boolean {\n    if (field.type === 'object') {\n      return true;\n    }\n\n    if (field.type === 'array') {\n      if (!field.arrayType || field.arrayType === 'object') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nexport const dataHelpers = new DataHelpers();","import { TConfigMethod, IQueryParam } from '../common/models/config.model';\nimport { dataHelpers } from '../helpers/data.helpers';\n\nexport type ResponseType = 'json' | 'text' | 'boolean' | 'status';\n\nexport interface IFetchParams {\n  origUrl: string\n  method?: TConfigMethod\n  headers?: any\n  queryParams?: IQueryParam[]\n  rawData?: any\n  body?: any\n  responseType?: ResponseType\n}\n\nclass HttpService {\n  public baseUrl: string;\n  public unauthorizedRedirectUrl: string;\n  public errorMessageDataPath: string | string[];\n  public requestHeaders: any;\n\n  constructor(baseUrl: string = '', unauthorizedRedirectUrl: string = '', errorMessageDataPath: string = '') {\n    this.baseUrl = baseUrl || '';\n    this.unauthorizedRedirectUrl = unauthorizedRedirectUrl || '';\n    this.errorMessageDataPath = errorMessageDataPath || '';\n    this.requestHeaders = {};\n  }\n\n  private urlIsAbsolute(url: string) {\n    if (url.indexOf('http') === 0 || url.indexOf('https') === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  private replaceParamsInUrl(url: string, rawData?: any): string {\n    if (!rawData || typeof rawData !== 'object') {\n      return url;\n    }\n\n    let outputUrl = url;\n\n    Object.keys(rawData).forEach((key) => {\n      const urlParamName = `:${key}`;\n      outputUrl = outputUrl.replace(urlParamName, rawData[key] as string);\n    });\n\n    return outputUrl;\n  }\n\n  private buildUrl(url: string, queryParams: IQueryParam[] = [], rawData?: any): string {\n    if (!queryParams || !queryParams.length) {\n      return this.replaceParamsInUrl(url, rawData);\n    }\n\n    let outputUrl = url;\n    const params = [];\n\n    for (let param of queryParams) {\n      if (!param.name || typeof param.value === 'undefined') {\n        continue;\n      }\n\n      // TODO: Add docs to \"urlReplaceOnly\"\n      if (param.urlReplaceOnly) {\n        const urlParamName = `:${param.name}`;\n        outputUrl = outputUrl.replace(urlParamName, param.value as string);\n      } else {\n        params.push(`${param.name}=${param.value || ''}`);\n      }\n    }\n\n    if (params.length) {\n      const firstSeparator = url.indexOf('?') >= 0 ? '&' : '?';\n      return outputUrl + firstSeparator + params.join('&');\n    }\n\n    return outputUrl;\n  }\n\n  private buildRequest(params: IFetchParams): { url: string, params: any } {\n    const reqUrl: string = this.urlIsAbsolute(params.origUrl) ? params.origUrl : this.baseUrl + params.origUrl;\n    const finalUrl: string = this.buildUrl(reqUrl, params.queryParams, params.rawData);\n    const requestParams = {\n      method: params.method ? params.method.toUpperCase() : 'GET',\n      headers: Object.assign({}, this.requestHeaders, params.headers || {}),\n      body: params.method === 'post' || params.method === 'put' || params.method === 'patch' ? params.body : undefined\n    };\n\n    return {\n      url: finalUrl,\n      params: requestParams\n    };\n  }\n\n  private async getErrorMessage(res: Response | any): Promise<string> {\n    let errorMessage: string = '';\n\n    try {\n      const body = await res.json();\n\n      for (const path of this.errorMessageDataPath) {\n        const dataAtPath = dataHelpers.extractDataByDataPath(body, path);\n\n        if (dataAtPath) {\n          errorMessage = dataAtPath;\n        }\n      }\n    } catch { } // TODO: proper handling of errors (^.^)\n\n    return errorMessage && errorMessage.length ?\n      errorMessage :\n      `${res.status} - ${res.statusText || ''}`;\n  }\n\n  private async handleError(res: Response) {\n    // In case response status is \"Unauthorized\", redirect to relevant url\n    if (res.status === 401 && this.unauthorizedRedirectUrl) {\n      const redirectUrl: string = this.unauthorizedRedirectUrl.replace(':returnUrl', encodeURIComponent(document.location.href));\n      document.location.href = redirectUrl;\n      return;\n    }\n\n    throw new Error(await this.getErrorMessage(res));\n  }\n\n  private async makeRequest(url: string, params: any = {}, responseType: ResponseType = 'json') {\n    const res: Response = await fetch(url, Object.assign({}, params, {}));\n\n    if (res.ok) {\n      switch (responseType) {\n        case 'json':\n          return await res.json();\n        case 'text':\n          return await res.text();\n        case 'boolean':\n          return true;\n        default:\n          return true;\n      }\n    }\n\n    await this.handleError(res);\n  }\n\n  public async fetch({ method, origUrl, queryParams, rawData, body, headers, responseType }: IFetchParams) {\n    const { url, params } = this.buildRequest({ method, origUrl, queryParams, rawData, body, headers });\n    return await this.makeRequest(url, params, responseType);\n  }\n}\n\nexport default HttpService;\n","import HTTPService from './http.service';\nimport { IConfig } from '../common/models/config.model';\nimport Ajv from 'ajv';\n\nconst httpService: HTTPService = new HTTPService();\n\nclass ConfigService extends HTTPService {\n\n  public async getRemoteConfig(url: string) {\n    if (url.endsWith('.js')) {\n      return (await import(/* webpackIgnore: true */url)).default;\n    }\n    return await httpService.fetch({\n      origUrl: url,\n    });\n  }\n\n  public async loadDefaultConfig() {\n    try {\n      return await this.getRemoteConfig('/config.json');\n    } catch (e) {\n      return (await this.getRemoteConfig('/config.js'));\n    }\n  }\n\n  public validateConfig(config: IConfig | null): { isValid: boolean, errorMessage: string | null } {\n    if (config === null) {\n      return {\n        isValid: true,\n        errorMessage: null,\n      }\n    }\n    const configSchema = require('../assets/schemas/config.schema.json');\n    const ajv = new Ajv({\n      allErrors: true,\n      verbose: true,\n    });\n    const validate = ajv.compile(configSchema);\n    const isValid = validate(config);\n    if (typeof isValid !== 'boolean') {\n      throw new Error('Unexpected asynchronous JSON validation');\n    }\n    if (isValid) {\n      return {\n        isValid,\n        errorMessage: null,\n      }\n    }\n    const firstError = validate.errors ? validate.errors[0] : undefined;\n    let errorMessage: string | null = null;\n    if (firstError?.message && firstError?.dataPath) {\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\": ${firstError.message}`\n    } else if (firstError?.message) {\n      errorMessage = `Error parsing configuration: ${firstError.message}`\n    } else if (firstError?.dataPath) {\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\"`\n    } else {\n      errorMessage = `Error parsing configuration`;\n    }\n    console.error(errorMessage);\n    console.error('All configuration errors: ', validate.errors);\n    return {\n      isValid,\n      errorMessage,\n    };\n  }\n\n}\n\nexport default new ConfigService();\n","export type ConfigFunction = (context?: any) => Promise<any> | any;\n\nexport interface IConfig {\n  remoteUrl: string\n  name: string\n  favicon: string\n  baseUrl: string\n  errorMessageDataPath: string | string[]\n  unauthorizedRedirectUrl: string\n  requestHeaders: any\n  pages: IConfigPage[]\n  customStyles?: ICustomStyles\n  customLabels?: ICustomLabels\n}\n\nexport interface ICustomStyles {\n  vars?: {\n    appText?: string\n    appBackground?: string\n    navBackground?: string\n    navText?: string\n    navItemText?: string\n    navItemHoverBackground?: string\n    navItemActiveBackground?: string\n    actionButtonBackground?: string\n    actionButtonHoverBackground?: string\n    actionButtonText?: string\n  }\n}\n\nexport interface ICustomLabels {\n  buttons?: ICustomButtonLabels\n  formTitles?: ICustomFormTitleLabels\n  placeholders?: ICustomPlaceholderLabels\n  tableColumnHeaders?: ICustomTableColumnHeaders\n  pagination?: ICustomPaginationLabels\n}\n\nexport interface ICustomButtonLabels {\n  addItem?: string\n  editItem?: string\n  deleteItem?: string\n  clearInput?: string\n  closeForm?: string\n  addArrayItem?: string\n}\n\nexport interface ICustomFormTitleLabels {\n  addItem: string\n  editItem: string\n}\n\nexport interface ICustomPlaceholderLabels {\n  object?: string\n  array?: string\n  text?: string\n  number?: string\n  color?: string\n  email?: string\n  password?: string\n  date?: string\n  file?: string\n}\n\nexport interface ICustomTableColumnHeaders {\n  actions?: string\n}\n\nexport interface ICustomPaginationLabels {\n  itemsCount?: string // :currentCountFrom, :currentCountTo and :totalCount usable in string\n  previousPageTitle?: string\n  nextPageTitle?: string\n}\n\nexport interface IConfigPage {\n  name: string\n  id: string\n  description: string\n  requestHeaders: any\n  methods: IConfigMethods\n  customActions: IConfigCustomAction[]\n  customLabels: ICustomLabels\n}\n\nexport interface IConfigMethods {\n  getAll: IConfigGetAllMethod\n  getSingle: IConfigGetSingleMethod\n  post: IConfigPostMethod\n  put: IConfigPutMethod\n  delete: IConfigDeleteMethod\n}\n\nexport type TConfigMethod = 'get' | 'post' | 'put' | 'delete' | 'patch';\n\nexport interface IConfigMethod {\n  url: string\n  actualMethod: TConfigMethod\n  requestHeaders: any\n  queryParams: IConfigInputField[]\n  fields: IConfigInputField[] | IConfigDisplayField[]\n}\n\nexport type TConfigInputField = 'text' | 'long-text' | 'object' | 'encode' | 'integer' | 'number' | 'boolean' | 'email' | 'color' | 'select' | 'array' | 'file' | 'password' | 'note' | 'hidden' | 'date';\n\nexport interface IConfigInputField {\n  originalName?: string\n  name: string\n  value: any\n  type?: TConfigInputField\n  label?: string\n  dataPath?: string\n  placeholder?: string\n  readonly?: boolean\n  options?: [string | { display: string, value: string }],\n  optionSource?: IConfigOptionSource\n  arrayType?: 'object' | 'text' | 'number' | 'integer'\n  required?: boolean\n  useInUrl?: boolean\n  accept?: string\n  urlReplaceOnly?: boolean\n}\n\nexport interface IConfigOptionSource {\n  url: string\n  dataPath: string\n  displayPath: string\n  valuePath: string\n  actualMethod: TConfigMethod\n  sortBy: string\n  requestHeaders: any\n}\n\nexport type TConfigDisplayField = 'text' | 'url' | 'image' | 'colorbox' | 'boolean' | 'json';\n\nexport interface IConfigDisplayField {\n  name: string\n  type: TConfigDisplayField\n  label: string\n  dataPath: string\n  filterable: boolean\n  truncate: boolean\n  url: string\n  urlLabel?: string\n}\n\nexport interface IConfigGetAllMethod extends IConfigMethod {\n  dataPath: string\n  queryParams: IConfigInputField[]\n  display: {\n    type: 'table' | 'cards',\n    fields: IConfigDisplayField[] // Deprecated\n  },\n  sortBy: string\n  fields: IConfigDisplayField[]\n  dataTransform?: ConfigFunction\n  pagination?: IConfigPagination\n}\n\nexport interface IConfigGetSingleMethod extends IConfigMethod {\n  dataPath: string\n}\n\nexport interface IConfigPostMethod extends IConfigMethod {\n  fields: IConfigInputField[]\n}\n\nexport interface IConfigPutMethod extends IConfigMethod {\n  fields: IConfigInputField[]\n  includeOriginalFields: boolean\n}\n\nexport interface IConfigDeleteMethod extends IConfigMethod { }\n\nexport interface IConfigCustomAction extends IConfigMethod {\n  name: string\n  icon: string\n  fields: IConfigInputField[]\n}\n\nexport type IConfigPagination = \n  IConfigQueryPagination | \n  IConfigJSONBodyPagination;\n\nexport type IConfigQueryPagination = _IConfigPagination<'query', IConfigQueryPaginationParams>;\nexport type IConfigJSONBodyPagination = _IConfigPagination<'json-body', IConfigJSONBodyPaginationParams>;\n\nexport const isQueryPagination = (obj: IConfigPagination): obj is IConfigQueryPagination => {\n  return obj.source === 'query';\n}\n\nexport const isJSONBodyPagination = (obj: IConfigPagination): obj is IConfigJSONBodyPagination => {\n  return obj.source === 'json-body';\n}\n\ninterface _IConfigPagination<src extends string, paginationParams> {\n  source: src\n  type: 'infinite-scroll' | 'buttons'\n  params: paginationParams\n  fields?: IConfigPaginationFields\n}\n\nexport interface IConfigQueryPaginationParams {\n  page: IQueryParamConfig\n  limit?: IQueryParamConfig\n  sortBy?: IQueryParamConfig\n  descending?: IQueryParamConfig\n}\n\nexport interface IConfigJSONBodyPaginationParams {\n  nextPath?: string\n  prevPath?: string\n  countPath?: string\n  limit?: IQueryParamConfig\n}\n\nexport interface IConfigPaginationFields {\n  page?: {\n    dataPath: string,\n    display?: boolean,\n  },\n  total?: {\n    dataPath: string,\n    display?: boolean,\n  },\n}\n\nexport interface IQueryParamConfig {\n  name: string\n  value?: string\n  label?: string\n  urlReplaceOnly?: boolean\n}\n\n\nexport interface IQueryParam extends IQueryParamConfig {\n  value: string\n}\n","export type IPaginationState = IQueryPaginationState | IJSONBodyPaginationState;\n\nexport const isQueryPaginationState = (obj: IPaginationState): obj is IQueryPaginationState => {\n  return obj.source === 'query';\n}\n\nexport const isJSONBodyPaginationState = (obj: IPaginationState): obj is IJSONBodyPaginationState => {\n  return obj.source === 'json-body';\n}\n\nexport type IQueryPaginationState = _IPaginationState<'query', {\n  page: number\n  limit: number\n  descending?: boolean\n  total?: number\n  sortBy?: string\n}>;\n\nexport type IJSONBodyPaginationState = _IPaginationState<'json-body', {\n  next: string | null\n  previous: string | null\n  limit: number\n}>;\n\ntype _IPaginationState<src extends string, AdditionalProperties> = {\n  source: src\n  type: 'infinite-scroll' | 'buttons'\n  hasPreviousPage?: boolean\n  hasNextPage?: boolean\n  total?: number\n} & AdditionalProperties","import React from 'react';\nimport { IConfig, IConfigPage } from '../common/models/config.model';\nimport HttpService from '../services/http.service';\n\nexport interface IAppContext {\n  config: IConfig | null\n  activePage: IConfigPage | null\n  error: string | null\n  setError: (error: string | null) => void\n  setActivePage: (activePage: IConfigPage | null) => void\n  httpService: HttpService\n}\n\nexport const AppContext = React.createContext<IAppContext>({\n  config: null,\n  activePage: null,\n  error: null,\n  setError: () => {},\n  setActivePage: () => {},\n  httpService: new HttpService()\n});","import React from 'react';\nimport { AppContext } from '../app.context';\n\nexport const withAppContext = (Component: any) => {\n  return (props: any) => (\n    <AppContext.Consumer>    \n      {(context) => {\n        return <Component {...props} context={context} />\n      }}\n    </AppContext.Consumer>\n  );\n};","import React from 'react';\n\nimport './loader.scss';\n\nexport const Loader = () => {\n  return (\n    <div className=\"app-loader cp-spinner cp-balls small\"></div>\n  );\n};","class PaginationHelpers {\n  public hasPreviousPage(page: string | number | undefined): boolean {\n    if (page === undefined) {\n      return false;\n    }\n\n    if (typeof page === 'string') {\n      return parseInt(page) > 1;\n    }\n\n    return page > 1;\n  }\n\n  public hasNextPage(_page: string | number, _itemsPerPage: string | number, _total: string | number | undefined): boolean {\n    if (_total === undefined) {\n      return true;\n    }\n    const page = typeof _page === 'string' ? parseInt(_page) : _page;\n    const itemsPerPage = typeof _itemsPerPage === 'string' ? parseInt(_itemsPerPage) : _itemsPerPage;\n    const total = typeof _total === 'string' ? parseInt(_total) : _total;\n\n    return page * itemsPerPage < total;\n  }\n}\n\nexport const paginationHelpers = new PaginationHelpers();","import React from 'react';\n\nimport './button.scss';\n\ninterface IProps {\n  children: any\n  type?: 'submit' | 'button' | 'reset'\n  title?: string\n  className?: string\n  onClick?: (e: any) => void\n  color?: 'gray' | 'blue' | 'green' | 'red'\n  disabled?: boolean\n}\n\nexport const Button = (props: IProps) => {\n  return (\n    <button {...props} className={`button ${props.className || ''} ${props.color || ''}`}>{props.children}</button>\n  );\n};","import React from 'react';\n\nimport './infiniteLoader.scss';\n\nexport const InfiniteLoader = () => {\n  return (\n    <div className=\"app-infinite-loader cp-spinner cp-balls small\"></div>\n  );\n};","import React from 'react';\nimport { ICustomLabels } from '../../common/models/config.model';\nimport { IPaginationState } from '../../common/models/states.model';\nimport { Button } from '../button/button.comp';\n\nimport './pagination.scss';\n\ninterface IProps {\n  pagination: IPaginationState\n  callbacks: {\n    previousPage: () => void,\n    nextPage: () => void,\n  }\n  customLabels?: ICustomLabels\n}\n\nexport const Pagination = ({ callbacks, pagination, customLabels }: IProps) => {\n  const previousTitle = customLabels?.pagination?.previousPageTitle || 'Previous page';\n  const nextTitle = customLabels?.pagination?.nextPageTitle || 'Next page';\n  return (\n    <div className=\"pagination-wrapper\">\n      <Button disabled={!pagination.hasPreviousPage} onClick={() => callbacks.previousPage()} title={previousTitle}>\n        <i className=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\n      </Button>\n      <Button disabled={!pagination.hasNextPage} onClick={() => callbacks.nextPage()} title={nextTitle}>\n        <i className=\"fa fa-arrow-right\" aria-hidden=\"true\" ></i>\n      </Button>\n    </div>\n  );\n};","import React, { useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nimport { IConfigDisplayField, IConfigCustomAction, ICustomLabels } from '../../common/models/config.model';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { Button } from '../button/button.comp';\nimport { InfiniteLoader } from '../infiniteLoader/infiniteLoader.comp';\nimport { IPaginationState } from '../../common/models/states.model';\nimport { Pagination } from '../pagination/pagination.comp';\n\nimport './table.scss';\n\ninterface IProps {\n  items: any[]\n  pagination?: IPaginationState\n  callbacks: {\n    delete: ((item: any) => void) | null\n    put: ((item: any) => void) | null\n    action: (item: any, action: IConfigCustomAction) => void\n    getPreviousPage: (() => void) | null\n    getNextPage: (() => void) | null\n  }\n  fields: IConfigDisplayField[]\n  customActions?: IConfigCustomAction[]\n  customLabels?: ICustomLabels\n}\n\nexport const Table = ({ items, fields, pagination, callbacks, customActions, customLabels }: IProps) => {\n  const editLabel = customLabels?.buttons?.editItem || 'Edit';\n  const deleteLabel = customLabels?.buttons?.deleteItem || 'Delete';\n  const actionColumnHeader = customLabels?.tableColumnHeaders?.actions || 'Actions';\n  const paginationCallbacks = {\n    nextPage: callbacks.getNextPage || (() => { return; }),\n    previousPage: callbacks.getPreviousPage || (() => { return; }),\n  };\n\n  function renderTableCell(origField: IConfigDisplayField, origItem: any, value: any) {\n    if (origField.type === 'boolean') {\n      value = value ? true : false;\n    }\n\n    if (value && typeof value === 'object' && origField.type != 'json') {\n      return 'object';\n    }\n\n    switch (origField.type) {\n      case 'text':\n        return <span>{value}</span>;\n      case 'boolean':\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\n      case 'image':\n        return <img src={value || ''} alt={value || origField.label || origField.name} />;\n      case 'url':\n        let url: string = origField.url || value || '';\n\n        // Replace all url vars\n        fields.forEach((field) => {\n          const fieldValue = dataHelpers.extractDataByDataPath(origItem, field.dataPath, field.name);\n          url = url.replace(`:${field.name}`, fieldValue);\n        });\n\n        return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{origField.urlLabel || value}</a>;\n      case 'colorbox':\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\n      case 'json':\n        return <div><pre>{ JSON.stringify(value, null, 2) }</pre></div>;\n      default:\n        return value;\n    }\n  }\n\n  function renderTableRow(item: any, rowIdx: number) {\n    return (\n      <tr key={`tr_${rowIdx}`}>\n        {\n          fields.map((field, fieldIdx) => {\n            const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\n            return (\n              <td className={field.truncate ? 'truncate' : ''} key={`td_${rowIdx}_${fieldIdx}`}>\n                {renderTableCell(field, item, value)}\n              </td>\n            );\n          })\n        }\n        <td>\n          <div className=\"actions-wrapper\">\n            {\n              callbacks.put &&\n              <Button onClick={() => callbacks.put?.(item)} title={editLabel}>\n                <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\n              </Button>\n            }\n            {\n              (customActions && customActions.length > 0) &&\n              customActions.map((action, idx) => (\n                <Button key={`action_${rowIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\n                  <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\n                </Button>\n              ))\n            }\n            {\n              callbacks.delete &&\n              <Button onClick={() => callbacks.delete?.(item)} title={deleteLabel}>\n                <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n              </Button>\n            }\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  function renderTableContent() {\n    return (\n      <table className=\"pure-table\">\n        <thead>\n          <tr>\n            {\n              fields.map((field) => {\n                return <th key={`th_${field.name}`}>{field.label || field.name}</th>;\n              })\n            }\n            <th>{actionColumnHeader}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            items.map(renderTableRow)\n          }\n        </tbody>\n      </table>\n    );\n  }\n\n  useEffect(() => {\n    if (\n      pagination?.type === 'infinite-scroll'\n      && document.body.clientHeight <= window.innerHeight\n      && pagination?.hasNextPage\n    ) {\n      paginationCallbacks.nextPage();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (pagination?.type === 'infinite-scroll') {\n    return (\n      <InfiniteScroll\n        dataLength={items.length}\n        next={callbacks.getNextPage || (() => null)}\n        hasMore={pagination?.hasNextPage || false}\n        loader={<InfiniteLoader />}\n      >\n        {renderTableContent()}\n      </InfiniteScroll>\n    );\n  }\n\n  return (\n    <div className=\"table-wrapper\">\n      {renderTableContent()}\n      {\n        pagination &&\n        pagination.type === 'buttons' &&\n        <Pagination\n          callbacks={paginationCallbacks}\n          pagination={pagination}\n          customLabels={customLabels}\n        ></Pagination>\n      }\n    </div >\n  );\n}\n","import React, { useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { IConfigDisplayField, IConfigCustomAction, ICustomLabels } from '../../common/models/config.model';\nimport { IPaginationState } from '../../common/models/states.model';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { Button } from '../button/button.comp';\nimport { Pagination } from '../pagination/pagination.comp';\n\nimport './cards.scss';\n\ninterface IProps {\n  items: any[]\n  pagination?: IPaginationState\n  callbacks: {\n    delete: ((item: any) => void) | null\n    put: ((item: any) => void) | null\n    action: (item: any, action: IConfigCustomAction) => void\n    getNextPage: (() => void) | null\n    getPreviousPage: (() => void) | null\n  }\n  fields: IConfigDisplayField[]\n  customActions?: IConfigCustomAction[]\n  customLabels?: ICustomLabels\n}\n\nexport const Cards = ({ items, fields, callbacks, customActions, customLabels, pagination }: IProps) => {\n  const editLabel: string = customLabels?.buttons?.editItem || 'Edit';\n  const deleteLabel: string = customLabels?.buttons?.deleteItem || 'Delete';\n  const paginationCallbacks = {\n    nextPage: callbacks.getNextPage || (() => { return; }),\n    previousPage: callbacks.getPreviousPage || (() => { return; }),\n  };\n\n  function renderRow(origField: IConfigDisplayField, origItem: any, value: any) {\n    if (origField.type === 'boolean') {\n      value = value ? true : false;\n    }\n\n    if (value && typeof value === 'object' && origField.type != 'json') {\n      return 'object';\n    }\n\n    switch (origField.type) {\n      case 'text':\n        return <span>{value}</span>;\n      case 'boolean':\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\n      case 'image':\n        if (!value) {\n          return <React.Fragment></React.Fragment>;\n        }\n        return <img src={value || ''} alt={value || origField.label || origField.name} />;\n      case 'url':\n        let url: string = origField.url || value || '';\n\n        // Replace all url vars\n        fields.forEach((field) => {\n          const fieldValue = dataHelpers.extractDataByDataPath(origItem, field.dataPath, field.name);\n          url = url.replace(`:${field.name}`, fieldValue);\n        });\n\n        return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{origField.urlLabel || value}</a>;\n      case 'colorbox':\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\n      case 'json':\n        return <div><pre>{ JSON.stringify(value, null, 2) }</pre></div>;\n      default:\n        return value;\n    }\n  }\n\n  function renderActions(item: any, cardIdx: number) {\n    return (\n      <div className=\"actions-wrapper\">\n        {\n          callbacks.put &&\n          <Button onClick={() => callbacks.put?.(item)} title={editLabel}>\n            <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\n          </Button>\n        }\n        {\n          (customActions && customActions.length > 0) &&\n          customActions.map((action, idx) => (\n            <Button key={`action_${cardIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\n              <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\n            </Button>\n          ))\n        }\n        {\n          callbacks.delete &&\n          <Button onClick={() => callbacks.delete?.(item)} title={deleteLabel}>\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n          </Button>\n        }\n      </div>\n    );\n  }\n\n  function renderCard(item: any, cardIdx: number) {\n    return (\n      <div className=\"card\" key={`card_${cardIdx}`}>\n        {\n          fields.map((field, fieldIdx) => {\n            const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\n            return (\n              <div className={`card-row ${field.type}`} key={`card_${cardIdx}_${fieldIdx}`}>\n                {\n                  field.type !== 'image' &&\n                  <label>{field.label || field.name}: </label>\n                }\n                {renderRow(field, item, value)}\n              </div>\n            );\n          })\n        }\n        {renderActions(item, cardIdx)}\n      </div>\n    );\n  }\n\n  function renderCardSkeleton(cardIdx: number) {\n    return (\n      <div className=\"card\" key={`card_${cardIdx}`}>\n        {\n          fields.map((field, fieldIdx) => {\n            return (\n              <div className={`card-row ${field.type}`} key={`card_${cardIdx}_${fieldIdx}`}>\n                {\n                  field.type !== 'image' &&\n                  <label>{field.label || field.name}: </label>\n                }\n                <Skeleton duration={0.6} />\n              </div>\n            );\n          })\n        }\n        {renderActions({}, cardIdx)}\n      </div>\n    );\n  }\n\n  function renderSkeletons() {\n    const startingIndex = items.length;\n    const skeletonsIndexes = Array.from(Array(pagination?.limit).keys()).map(value => value + startingIndex);\n    return skeletonsIndexes.map(renderCardSkeleton);\n  }\n\n  useEffect(() => {\n    if (\n      pagination?.type === 'infinite-scroll'\n      && document.body.clientHeight <= window.innerHeight\n      && callbacks.getNextPage\n      && pagination?.hasNextPage\n    ) {\n      callbacks.getNextPage();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (pagination?.type === 'infinite-scroll') {\n    return (\n      <InfiniteScroll className=\"cards-wrapper\"\n        dataLength={items.length}\n        next={callbacks.getNextPage || (() => null)}\n        hasMore={pagination?.hasNextPage || false}\n        loader={renderSkeletons()}\n      >\n        {items.map(renderCard)}\n      </InfiniteScroll>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"cards-wrapper\">\n        {items.map(renderCard)}\n      </div>\n      {\n        pagination &&\n        pagination.type === 'buttons' &&\n        <Pagination\n          callbacks={paginationCallbacks}\n          pagination={pagination}\n        ></Pagination>\n      }\n    </React.Fragment>\n  )\n}","import React, { useState } from 'react';\nimport { orderBy } from 'natural-orderby';\nimport { toast } from 'react-toastify';\n\nimport { IConfigInputField, IConfigOptionSource, ICustomLabels } from '../../common/models/config.model';\nimport { Button } from '../button/button.comp';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { IAppContext } from '../app.context';\nimport { dataHelpers } from '../../helpers/data.helpers';\n\nimport './formRow.scss';\n\ninterface IProps {\n  context: IAppContext\n  field: IConfigInputField\n  onChange: (fieldName: string, value: any, submitAfterChange?: boolean) => void\n  showReset?: boolean\n  direction?: 'row' | 'column'\n}\n\nexport const FormRow = withAppContext(({ context, field, direction, showReset, onChange }: IProps) => {\n  const [optionSources, setOptionSources] = useState<any>({});\n  const { httpService, activePage, config } = context;\n  const pageHeaders: any = activePage?.requestHeaders || {};\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\n  const addArrayItemLabel = customLabels?.buttons?.addArrayItem || 'Add Item';\n  const clearLabel = customLabels?.buttons?.clearInput || 'Clear';\n\n  async function loadOptionSourceFromRemote(fieldName: string, optionSource: IConfigOptionSource) {\n    try {\n      const { url, dataPath, actualMethod, requestHeaders } = optionSource;\n\n      if (!url) {\n        throw new Error(`URL option source (for field \"${fieldName}\") is empty.`);\n      }\n\n      const result = await httpService.fetch({\n        method: actualMethod || 'get',\n        origUrl: url,\n        queryParams: [],\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}),\n      });\n\n      const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n      if (!extractedData || !extractedData.length) {\n        throw new Error(`Option source data is empty (for field \"${fieldName}\")`);\n      }\n\n      // Map option source to fields\n      const optionSourceData = extractedData.map((option: any, idx: number) => {\n        const { valuePath, displayPath } = optionSource;\n\n        if (typeof option === 'string') {\n          return option;\n        }\n\n        return {\n          display: displayPath && option[displayPath] ? option[displayPath] : `Option ${idx + 1}`,\n          value: valuePath && option[valuePath] ? option[valuePath] : `${idx}`,\n        };\n      });\n\n      setOptionSources({\n        ...optionSources,\n        [fieldName]: optionSourceData\n      });\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function addItemToFieldArray(e: any, originalField: IConfigInputField) {\n    e.preventDefault();\n\n    onChange(field.name, [\n      ...(originalField.value || []),\n      ''\n    ]);\n  }\n\n  function removeItemToFieldArray(originalField: IConfigInputField, idx: number) {\n    const updatedArray = [\n      ...(originalField.value || [])\n    ];\n\n    updatedArray.splice(idx, 1);\n\n    onChange(field.name, updatedArray);\n  }\n\n  function renderArrayItems(originalField: IConfigInputField) {\n    const array: any[] = originalField.value || [];\n\n    return (\n      <div className=\"array-form\">\n        {\n          array.map((item, itemIdx) => {\n            const inputField = renderFieldInput({\n              value: item,\n              name: `${originalField.name}.${itemIdx}`,\n            } as IConfigInputField, (fieldName, value) => {\n              const updatedArray = (originalField.value || []).map((localValue: any, idx: number) => {\n                if (idx === itemIdx) {\n                  return value;\n                }\n                return localValue;\n              });\n\n              onChange(originalField.name, updatedArray);\n            });\n\n            return (\n              <div className=\"array-form-item\" key={`array_form_${itemIdx}`}>\n                {inputField}\n                <i title={clearLabel} onClick={() => removeItemToFieldArray(originalField, itemIdx)} aria-label=\"Remove\" className=\"clear-input fa fa-times\"></i>\n              </div>\n            )\n          })\n        }\n        <Button className=\"add-array-item\" onClick={(e) => addItemToFieldArray(e, originalField)} title={addArrayItemLabel}>\n          <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n        </Button>\n      </div>\n    );\n  }\n\n  function renderFieldInput(field: IConfigInputField, changeCallback: (fieldName: string, value: any, submitAfterChange?: boolean) => void) {\n    const inputProps = (defaultPlaceholder: string = '') => {\n      return {\n        value: field.value,\n        placeholder: field.placeholder || defaultPlaceholder,\n        disabled: field.readonly,\n        required: field.required,\n        onChange: (e: any) => changeCallback(field.name, e.target.value),\n      };\n    };\n\n    switch (field.type) {\n      case 'boolean':\n        return <input type=\"checkbox\" {...inputProps()} checked={field.value} onChange={(e) => changeCallback(field.name, e.target.checked, true)} />;\n      case 'select':\n        {\n          const { optionSource } = field;\n\n          if (optionSource && !optionSources[field.name]) {\n            loadOptionSourceFromRemote(field.name, optionSource);\n            return <select {...inputProps()}><option>-- Loading Options... --</option></select>\n          }\n\n          const sortBy = field.optionSource?.sortBy;\n          const finalOptions: { value: string, display: string }[] = optionSources[field.name] || field.options || [];\n          const sortedOptions = orderBy(finalOptions, typeof sortBy === 'string' ? [sortBy] : (sortBy || []));\n\n          return (\n            <select {...inputProps()}>\n              <option>-- Select --</option>\n              {\n                sortedOptions.map((option, idx) => {\n                  const key = `option_${idx}_`;\n                  if (typeof option !== 'object') {\n                    return <option key={`${key}_${option}`} value={option}>{option}</option>\n                  }\n                  return <option key={`${key}_${option.value}`} value={option.value}>{option.display || option.value}</option>\n                })\n              }\n            </select>\n          );\n        };\n      case 'object':\n        return <textarea {...inputProps(customLabels?.placeholders?.object || 'Enter JSON...')}></textarea>;\n      case 'array': {\n        const { arrayType, value } = field;\n        if (!value || !arrayType || arrayType === 'object') {\n          return <textarea {...inputProps(customLabels?.placeholders?.array || 'Enter JSON array...')}></textarea>;\n        }\n        return renderArrayItems(field);\n      }\n      case 'long-text':\n        return <textarea {...inputProps(customLabels?.placeholders?.text || 'Enter text...')}></textarea>;\n      case 'number':\n      case 'integer':\n        return <input type=\"number\" {...inputProps(customLabels?.placeholders?.number || '0')} onChange={(e) => changeCallback(field.name, e.target.valueAsNumber)} />;\n      case 'color':\n        return <input type=\"color\" {...inputProps(customLabels?.placeholders?.color || 'Enter color...')} />;\n      case 'email':\n        return <input type=\"email\" {...inputProps(customLabels?.placeholders?.email || 'Enter email...')} />;\n      case 'password':\n        return <input type=\"password\" {...inputProps(customLabels?.placeholders?.password || 'Enter password...')} />;\n      case 'hidden':\n        return <input type=\"hidden\" value={field.value} />;\n      case 'file':\n        return <input type=\"file\" accept={field.accept || '*'} placeholder={field.placeholder || customLabels?.placeholders?.file || 'Select file...'} name={field.name || 'file'} disabled={field.readonly} required={field.required} />;\n      case 'note':\n        return <p className=\"note\">{field.value}</p>;\n      case 'date':\n        return <input type=\"date\" {...inputProps(customLabels?.placeholders?.date || 'Enter date...')} />;\n      case 'text':\n      default:\n        return <input type=\"text\" {...inputProps(customLabels?.placeholders?.text || 'Enter text...')} />;\n    }\n  }\n\n  return (\n    <div className={`form-row ${direction || 'row'}`}>\n      {\n        field.type !== 'hidden' &&\n        <label>{field.label || field.originalName}{field.required ? ' *' : ''}</label>\n      }\n      {renderFieldInput(field, onChange)}\n      {\n        (showReset && !field.readonly && field.value && field.value.length > 0) &&\n        <i title={clearLabel} onClick={() => onChange(field.name, '', true)} aria-label=\"Clear\" className=\"clear-input fa fa-times\"></i>\n      }\n    </div>\n  );\n});\n","import React, { useState, useEffect } from 'react';\n\nimport { IConfigInputField, IConfigPagination } from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\n\nimport './queryParams.scss';\n\ninterface IProps {\n  initialParams: IConfigInputField[]\n  paginationConfig?: IConfigPagination\n  submitCallback: (queryParams: IConfigInputField[], reset?: boolean) => void\n}\n\nexport const QueryParams = ({ initialParams, paginationConfig, submitCallback }: IProps) => {\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initialParams);\n\n  function submit(e?: any) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\n      submitCallback(queryParams, true);\n    } else {\n      submitCallback(queryParams);\n    }\n  }\n\n  function formChanged(fieldName: string, value: any, submitAfterChange?: boolean) {\n    const updatedQueryParams: IConfigInputField[] = [...queryParams].map((field) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setQueryParams(updatedQueryParams);\n\n    if (submitAfterChange) {\n      submit();\n    }\n  }\n\n  useEffect(() => {\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\n      const filteredParams = initialParams.filter(param => !['page', 'limit'].includes(param.name));\n      setQueryParams(filteredParams);\n    } else {\n      setQueryParams(initialParams);\n    }\n  }, [paginationConfig, initialParams]);\n\n  if (!queryParams.length) {\n    return <React.Fragment></React.Fragment>;\n  }\n\n  return (\n    <section className=\"query-params-form\">\n      <h5>Query Params:</h5>\n      <form onSubmit={submit}>\n        {\n          queryParams.map((queryParam, idx) => {\n            return (\n              <FormRow\n                key={`query_param_${idx}`}\n                field={queryParam}\n                onChange={formChanged}\n                showReset={!queryParam.type || queryParam.type === 'text'}\n              />\n            );\n          })\n        }\n        <Button type=\"submit\" onClick={submit}>Submit</Button>\n      </form>\n    </section>\n  );\n};","import React, { Component, RefObject, ReactChild } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './popup.scss';\nimport { ICustomLabels } from '../../common/models/config.model';\n\ninterface IPopupProps {\n  className?: string\n  style?: any\n  show: boolean\n  closeCallback: any\n  children: ReactChild\n  refCallback?: string | ((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null | undefined\n  customLabels?: ICustomLabels\n}\n\nlet portalRoot: HTMLDivElement = document.getElementById('popup-portal') as HTMLDivElement;\nif (!portalRoot) {\n  portalRoot = document.createElement('div');\n  portalRoot.setAttribute('id', 'popup-portal');\n  document.body.append(portalRoot);\n}\n\nclass PortalPopup extends Component {\n  private el: HTMLElement;\n\n  constructor(props: any) {\n    super(props);\n\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount = () => {\n    portalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount = () => {\n    portalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.el);\n  }\n}\n\nexport class Popup extends Component<IPopupProps> {\n  render() {\n    const style: any = Object.assign({}, { display: this.props.show ? 'block' : 'none' }, this.props.style || {});\n    const closeLabel = this.props.customLabels?.buttons?.closeForm || 'Close';\n\n    return (\n      <PortalPopup>\n        {\n          this.props.show ?\n            <div className={`popup ${this.props.className || ''}`} style={style}>\n              <div className=\"overlay\" onClick={(e: any) => this.props.closeCallback(e)}></div>\n              <div className=\"popup-content\" ref={this.props.refCallback}>\n                {this.props.children}\n                <button title={closeLabel} className=\"close-popup\" onClick={(e: any) => this.props.closeCallback(e)}>\n                  <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n                </button>\n              </div>\n            </div> :\n            null\n        }\n      </PortalPopup>\n    );\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this._handleKeyDown.bind(this));\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this._handleKeyDown.bind(this));\n  }\n\n  _handleKeyDown = (e: KeyboardEvent) => {\n    const { show, closeCallback } = this.props;\n\n    if (show && e.keyCode === 27) {\n      closeCallback(e);\n    }\n  }\n};","import { IConfigInputField } from '../common/models/config.model';\n\nclass FileHelpers {\n\n  public isMultipartForm(fields: IConfigInputField[]): boolean {\n    for (const fieldIndex in fields) {\n      let field = fields[fieldIndex];\n\n      if (field.type === 'file') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  \n}\n\nexport const fileHelpers = new FileHelpers();","import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { Popup } from '../popup/popup.comp';\nimport {\n  IConfigInputField,\n  IConfigGetSingleMethod,\n  IConfigPostMethod,\n  IConfigPutMethod,\n  ICustomLabels\n} from '../../common/models/config.model';\nimport { FormRow } from '../formRow/formRow.comp';\nimport { Button } from '../button/button.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { fileHelpers } from '../../helpers/file.helpers';\nimport { IAppContext } from '../app.context';\nimport { withAppContext } from '../withContext/withContext.comp';\n\nimport './formPopup.scss';\n\nconst flatten = require('flat');\nconst unflatten = require('flat').unflatten;\n\ninterface IProps {\n  context: IAppContext\n  title: string\n  fields: IConfigInputField[]\n  rawData?: any\n  getSingleConfig?: IConfigGetSingleMethod\n  methodConfig: IConfigPostMethod | IConfigPutMethod\n  closeCallback: (reloadData: boolean) => void\n  submitCallback: (body: any, containFiles: boolean) => void\n}\n\nexport const FormPopup = withAppContext(({ context, title, fields, rawData, getSingleConfig, methodConfig, submitCallback, closeCallback }: IProps) => {\n  const fieldsCopy: IConfigInputField[] = JSON.parse(JSON.stringify(fields));\n  const { httpService, activePage, config } = context;\n  const [loading, setLoading] = useState<boolean>(true);\n  const [formFields, setFormFields] = useState<IConfigInputField[]>([]);\n  const [finalRawData, setFinalRawData] = useState<any>(null);\n  const pageHeaders: any = activePage?.requestHeaders || {};\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\n\n  async function initFormFields() {\n    let finalRawData: any = rawData || {};\n\n    if (getSingleConfig && getSingleConfig.url) {\n      try {\n        const { url, requestHeaders, actualMethod, dataPath, queryParams } = getSingleConfig;\n        const result = await httpService.fetch({\n          method: actualMethod || 'get',\n          origUrl: url,\n          queryParams,\n          headers: Object.assign({}, pageHeaders,  requestHeaders || {}),\n          rawData,\n        });\n\n        const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\n\n        if (extractedData && typeof extractedData === 'object') {\n          finalRawData = extractedData;\n        }\n      } catch (e) {\n        console.error('Could not load single item\\'s data.', e);\n        toast.error('Could not load single item\\'s data.');\n      }\n    }\n\n    setFinalRawData(finalRawData); // Store the raw data for later.\n\n    const flattenData = flatten(finalRawData || {});\n\n    setFormFields(fieldsCopy.map((field) => {\n      let key = field.name;\n\n      field.originalName = field.name;\n\n      if (field.dataPath) {\n        key = `${field.dataPath}.${field.name}`;\n      }\n\n      // Changing field name to include datapath\n      // This will use us later for unflatten the final object\n      field.name = key;\n\n      if (dataHelpers.checkIfFieldIsObject(field)) {\n        if (finalRawData[key] || field.value) {\n          field.value = JSON.stringify(finalRawData[key] || field.value, null, '  ') || '';\n        }\n        return field;\n      }\n\n      if (field.type === 'array') {\n        field.value = finalRawData[key] || field.value || [];\n        return field;\n      }\n\n      if (typeof flattenData[key] !== 'undefined') {\n        field.value = flattenData[key];\n      } else {\n        // important in order to prevent controlled / uncontrolled components error\n        field.value = typeof field.value === 'undefined' ? '' : field.value;\n      }\n\n      return field;\n    }));\n\n    setLoading(false);\n  }\n\n  async function submitForm(e: any) {\n    e.preventDefault();\n\n    const finalObject: any = (methodConfig as IConfigPutMethod).includeOriginalFields ? Object.assign({}, finalRawData) : {};\n    const formData = new FormData();\n    const containFiles: boolean = fileHelpers.isMultipartForm(formFields);\n    let validationError = null;\n\n    formFields.forEach((field) => {\n      if (field.type === 'file') {\n        const fileInput: any = document.querySelector(`input[name=\"${field.name || 'file'}\"]`) as HTMLInputElement;\n\n        if (fileInput.files.length > 0) {\n          const firstFile = fileInput.files[0];\n          formData.append(field.name || 'file', firstFile, firstFile.name);\n        }\n        return;\n      }\n\n      finalObject[field.name] = field.value;\n\n      if (containFiles) {\n        formData.append(field.name, field.value);\n      }\n\n      if (field.required && field.type !== 'boolean' && !field.value) {\n        validationError = 'Please fill up all required fields.';\n      }\n\n      if (dataHelpers.checkIfFieldIsObject(field) && field.value) {\n        try {\n          finalObject[field.name] = JSON.parse(field.value);\n        } catch (e) {\n          validationError = `Invalid JSON for field \"${field.name}\".`;\n        }\n      }\n\n      if (field.type === 'boolean') {\n        finalObject[field.name] = field.value || false;\n      }\n\n      if (field.type === 'encode') {\n        finalObject[field.name] = encodeURIComponent(field.value);\n      }\n    });\n\n    if (validationError) {\n      toast.error(validationError);\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const body = containFiles ? formData : unflatten(finalObject);\n      await submitCallback(body, containFiles);\n\n      toast.success('Great Success!');\n\n      closeCallback(true);\n    } catch (e) {\n      toast.error(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  function formChanged(fieldName: string, value: any) {\n    let updatedFormFields: IConfigInputField[] = JSON.parse(JSON.stringify(formFields));\n\n    updatedFormFields = updatedFormFields.map((field: IConfigInputField) => {\n      if (field.name === fieldName) {\n        field.value = value;\n      }\n\n      return field;\n    });\n\n    setFormFields(updatedFormFields);\n  }\n\n  useEffect(() => {\n    initFormFields();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Popup\n      show={true}\n      className=\"form-popup\"\n      closeCallback={() => closeCallback(false)}\n      customLabels={customLabels}\n    >\n      <React.Fragment>\n        <h2>{title}</h2>\n        <section>\n          {\n            loading ?\n            <Loader /> :\n            <form onSubmit={submitForm}>\n              {\n                formFields.map((field, idx) => {\n                  return (\n                    <FormRow\n                      key={`field_${idx}`}\n                      field={field}\n                      onChange={formChanged}\n                      showReset={!field.type || field.type === 'text'}\n                    />\n                  );\n                })\n              }\n              <div className=\"buttons-wrapper center\">\n                <Button type=\"submit\" onClick={submitForm} color=\"green\">Submit</Button>\n              </div>\n            </form>\n          }\n        </section>\n      </React.Fragment>\n    </Popup>\n  );\n});\n","import React from 'react';\n\nimport './filterField.scss';\n\ninterface IProps {\n  onChange: (filter: string) => void\n}\n\nexport const FilterField = ({ onChange }: IProps) => {\n  return (\n    <section className=\"filter-wrapper\">\n      <h5>Filter:</h5>\n      <div className=\"form-row\">\n        <input type=\"text\" placeholder=\"Search...\" onChange={(e) => onChange(e.target.value.toLowerCase())} />\n      </div>\n    </section>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport * as QueryString from 'query-string';\nimport { toast } from 'react-toastify';\nimport { orderBy } from 'natural-orderby';\nimport { find, remove } from 'lodash';\n\nimport { IAppContext } from '../app.context';\nimport { IConfigPage, IConfigMethods, IConfigGetAllMethod, IConfigPostMethod, IConfigPutMethod, IConfigDeleteMethod, IConfigInputField, IConfigCustomAction, IConfigGetSingleMethod, ICustomLabels, IConfigPagination, isQueryPagination, isJSONBodyPagination } from '../../common/models/config.model';\nimport { IPaginationState, isQueryPaginationState, isJSONBodyPaginationState, IQueryPaginationState, IJSONBodyPaginationState } from '../../common/models/states.model';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { Loader } from '../loader/loader.comp';\nimport { dataHelpers } from '../../helpers/data.helpers';\nimport { paginationHelpers } from '../../helpers/pagination.helpers';\nimport { Table } from '../table/table.comp';\nimport { Cards } from '../cards/cards.comp';\nimport { QueryParams } from '../queryParams/queryParams.comp';\nimport { Button } from '../button/button.comp';\nimport { FormPopup } from '../formPopup/formPopup.comp';\nimport { FilterField } from '../filterField/filterField.comp';\n\nimport './page.scss';\n\ninterface IProps {\n  context: IAppContext\n}\n\ninterface IPopupProps {\n  type: 'add' | 'update' | 'action'\n  title: string\n  config: IConfigPostMethod | IConfigPutMethod\n  submitCallback: (body: any, containFiles: boolean) => void\n  getSingleConfig?: IConfigGetSingleMethod\n  rawData?: {}\n}\n\nconst buildInitQueryParamsAndPaginationState = (\n  initQueryParams: IConfigInputField[],\n  paginationConfig?: IConfigPagination,\n): {\n  initQueryParams: IConfigInputField[],\n  initialPagination?: IPaginationState,\n} => {\n    let initialPagination: IPaginationState | undefined = undefined;\n\n    if (paginationConfig) {\n      if(isQueryPagination(paginationConfig)) {\n        initialPagination = {\n          source: paginationConfig.source,\n          type: paginationConfig.type,\n          page: parseInt(paginationConfig.params?.page?.value || '1'),\n          limit: parseInt(paginationConfig.params?.limit?.value || '10'),\n          descending: paginationConfig.params?.descending?.value === 'true' || false,\n          hasPreviousPage: false,\n          hasNextPage: false,\n          sortBy: paginationConfig.params?.sortBy?.value,\n        };\n\n        if (!find(initQueryParams, { name: 'page' })) {\n          initQueryParams.push({\n            name: paginationConfig?.params?.page?.name,\n            label: paginationConfig?.params?.page?.label || 'Page',\n            value: initialPagination?.page\n          });\n        }\n\n        if (paginationConfig?.params?.limit && !find(initQueryParams, { name: 'limit' })) {\n          initQueryParams.push({\n            name: paginationConfig.params.limit.name,\n            label: paginationConfig.params.limit.label || 'Limit',\n            value: initialPagination?.limit\n          });\n        }\n\n        if (paginationConfig?.params?.descending && !find(initQueryParams, { name: 'descending' })) {\n          initQueryParams.push({\n            name: paginationConfig.params.descending.name,\n            label: paginationConfig.params.descending.label || 'Descending',\n            value: initialPagination?.descending\n          });\n        }\n\n        if (paginationConfig?.params?.sortBy && !find(initQueryParams, { name: 'sortBy' })) {\n          initQueryParams.push({\n            name: paginationConfig.params.sortBy.name,\n            label: 'Sort by',\n            value: initialPagination?.sortBy\n          });\n        }\n      } else if(isJSONBodyPagination(paginationConfig)) {\n        initialPagination = {\n          source: 'json-body',\n          type: paginationConfig.type,\n          hasNextPage: false,\n          hasPreviousPage: false,\n          next: null,\n          previous: null,\n          limit: parseInt(paginationConfig.params?.limit?.value || '10')\n        }\n\n        if (paginationConfig?.params?.limit && !find(initQueryParams, { name: 'limit' })) {\n          initQueryParams.push({\n            name: paginationConfig.params.limit.name,\n            label: paginationConfig.params.limit.label || 'Limit',\n            value: initialPagination?.limit\n          });\n        }\n\n      } else {\n        throw new Error('unrecognized pagination');\n      }\n    }\n\n    return {\n      initQueryParams,\n      initialPagination\n    };\n};\n\nconst PageComp = ({ context }: IProps) => {\n  const { page } = useParams();\n  const { push, location } = useHistory();\n  const { activePage, error, setError, httpService, config } = context;\n  const pageHeaders: any = activePage?.requestHeaders || {};\n  const pageMethods: IConfigMethods | undefined = activePage?.methods;\n  const customActions: IConfigCustomAction[] = activePage?.customActions || [];\n  const getAllConfig: IConfigGetAllMethod | undefined = pageMethods?.getAll;\n  const paginationConfig = getAllConfig?.pagination;\n  const infiniteScroll = paginationConfig?.type === 'infinite-scroll';\n  const getSingleConfig: IConfigGetSingleMethod | undefined = pageMethods?.getSingle;\n  const postConfig: IConfigPostMethod | undefined = pageMethods?.post;\n  const putConfig: IConfigPutMethod | undefined = pageMethods?.put;\n  const deleteConfig: IConfigDeleteMethod | undefined = pageMethods?.delete;\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\n  const addItemLabel = customLabels?.buttons?.addItem || '+ Add Item';\n  const addItemFormTitle = customLabels?.formTitles?.addItem || 'Add Item';\n  const editItemFormTitle = customLabels?.formTitles?.editItem || 'Update Item';\n  const { initQueryParams, initialPagination } = buildInitQueryParamsAndPaginationState(getAllConfig?.queryParams || [], paginationConfig);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [openedPopup, setOpenedPopup] = useState<null | IPopupProps>(null);\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initQueryParams);\n  const [pagination, setPagination] = useState<IPaginationState | undefined>(initialPagination);\n  const [items, setItems] = useState<any[]>([]);\n  const [filter, setFilter] = useState<string>('');\n\n  function closeFormPopup(refreshData: boolean = false) {\n    setOpenedPopup(null);\n\n    if (refreshData === true) {\n      if (pagination?.type === 'infinite-scroll') {\n        setItems([]);\n        const updatedParams = [...queryParams];\n        remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n        setQueryParams(buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams);\n      } else {\n        getAllRequest();\n      }\n    }\n  }\n\n  async function openEditPopup(rawData: any) {\n    const params: IPopupProps = {\n      rawData,\n      type: 'update',\n      title: editItemFormTitle,\n      config: putConfig as IConfigPutMethod,\n      getSingleConfig,\n      submitCallback: async (body: any, containFiles: boolean) => {\n        return await updateItem(body, rawData, containFiles);\n      }\n    };\n\n    setOpenedPopup(params);\n  }\n\n  function openCustomActionPopup(rawData: any, action: IConfigCustomAction) {\n    const params: IPopupProps = {\n      rawData,\n      type: 'action',\n      title: action.name || 'Custom Action',\n      config: action as IConfigCustomAction,\n      submitCallback: async (body: any, containFiles: boolean) => {\n        return await performAction(body, rawData, action, containFiles);\n      }\n    };\n\n    setOpenedPopup(params);\n  }\n\n  async function performAction(body: any, rawData: any, action: IConfigCustomAction, containFiles: boolean) {\n    const { url, requestHeaders, actualMethod } = action;\n\n    return await httpService.fetch({\n      method: actualMethod || 'put',\n      origUrl: url,\n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  function extractQueryParams(params: IConfigInputField[]): IConfigInputField[] {\n    if(!paginationConfig || isQueryPagination(paginationConfig)) {\n      const parsedParams = QueryString.parse(location.search);\n      const finalQueryParams = params.map((queryParam) => {\n        if (typeof parsedParams[queryParam.name] !== 'undefined') {\n          queryParam.value = queryParam.type === 'boolean' ? (parsedParams[queryParam.name] === 'true') : decodeURIComponent(parsedParams[queryParam.name] as any);\n        } else {\n          queryParam.value = queryParam.value || '';\n        }\n        return queryParam;\n      });\n\n      setPagination(getUpdatedPaginationState(finalQueryParams, null))\n\n      return finalQueryParams;\n    } else {\n      return params;\n    }\n  }\n\n  async function fetchPageData(params: {\n    actualMethod: 'get' | 'put' | 'post' | 'patch' | 'delete', \n    url: string,\n    requestHeaders?: any,\n    dataPath: string,\n    dataTransform: any,\n    sortBy: any\n  }) {\n    const result = await httpService.fetch({\n      method: params.actualMethod || 'get',\n      origUrl: params.url,\n      queryParams,\n      headers: Object.assign({}, pageHeaders, params.requestHeaders || {})\n    });\n    let extractedData = dataHelpers.extractDataByDataPath(result, params.dataPath);\n\n    if (!extractedData) {\n      throw new Error('Could not extract data from response.');\n    }\n\n    if (!Array.isArray(extractedData)) {\n      throw new Error('Extracted data is invalid.');\n    }\n\n    if (typeof params.dataTransform === 'function') {\n      extractedData = await params.dataTransform(extractedData);\n    }\n\n    const orderedItems = orderBy(extractedData, typeof params.sortBy === 'string' ? [params.sortBy] : (params.sortBy || []));\n\n    if (paginationConfig) {\n      const total = paginationConfig.fields?.total ? dataHelpers.extractDataByDataPath(result, paginationConfig.fields.total.dataPath) : undefined;\n      const newPaginationState = getUpdatedPaginationState(queryParams, result, total);\n      if (newPaginationState) {\n        setPagination(newPaginationState);\n      }\n    }\n\n    if (infiniteScroll) {\n      setItems([...items, ...orderedItems]);\n    } else {\n      setItems(orderedItems);\n    }\n  }\n\n  async function getAllRequest() {\n    if (infiniteScroll) {\n      if(pagination) {\n        if(isQueryPaginationState(pagination)) {\n          if(pagination?.page !== 1) {\n            setLoading(false);\n          }\n        } else if( isJSONBodyPaginationState(pagination)) {\n          if(pagination.previous) {\n            setLoading(false);\n          }\n        } else {\n          throw new Error('unrecognized pagination source');\n        }\n      }\n    } else {\n      setLoading(true);\n    }\n\n    setError(null);\n\n    try {\n      if (!getAllConfig) {\n        throw new Error('Get all method is not defined.');\n      }\n\n      if (paginationConfig && !pagination) {\n        throw new Error('Pagination not initialized.');\n      }\n\n      const { url, requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\n      fetchPageData(\n        {\n          actualMethod: actualMethod,\n          url: url,\n          requestHeaders: requestHeaders,\n          dataPath: dataPath,\n          dataTransform: dataTransform,\n          sortBy: sortBy\n        }\n      )\n\n    } catch (e) {\n      setError(e.message);\n    }\n\n    setLoading(false);\n  }\n\n  async function addItem(body: any, containFiles?: boolean) {\n    if (!postConfig) {\n      throw new Error('Post method is not defined.');\n    }\n\n    const { url, requestHeaders, actualMethod } = postConfig;\n\n    return await httpService.fetch({\n      method: actualMethod || 'post',\n      origUrl: url,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  async function updateItem(body: any, rawData: any, containFiles?: boolean) {\n    if (!putConfig) {\n      throw new Error('Put method is not defined.');\n    }\n\n    const { url, requestHeaders, actualMethod } = putConfig;\n\n    return await httpService.fetch({\n      method: actualMethod || 'put',\n      origUrl: url,\n      rawData,\n      body: containFiles ? body : JSON.stringify(body),\n      headers: {\n        ...pageHeaders,\n        ...(requestHeaders || {}),\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\n      },\n      responseType: 'boolean'\n    });\n  }\n\n  async function deleteItem(item: any) {\n    const approved: boolean = window.confirm('Are you sure you want to delete this item?');\n\n    if (!approved) {\n      return;\n    }\n\n    try {\n      if (!deleteConfig) {\n        throw new Error('Delete method is not defined.');\n      }\n\n      const { url, requestHeaders, actualMethod } = deleteConfig;\n      const success = await httpService.fetch({\n        method: actualMethod || 'delete',\n        origUrl: url,\n        rawData: item,\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}),\n        responseType: 'boolean'\n      });\n\n      if (success) {\n        if (pagination?.type === 'infinite-scroll') {\n          setItems([]);\n          const updatedParams = [...queryParams];\n          remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n          setQueryParams(buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams);\n        } else {\n          getAllRequest();\n        }\n      }\n    } catch (e) {\n      toast.error(e.message);\n    }\n  }\n\n  function submitQueryParams(updatedParams: IConfigInputField[], reset?: boolean) {\n    if (loading) {\n      return;\n    }\n    \n    if (reset) {\n      setItems([]);\n      remove(updatedParams, param => ['page', 'limit'].includes(param.name));\n      updatedParams = buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams;\n    }\n\n    setQueryParams(updatedParams);\n    setPagination(getUpdatedPaginationState(updatedParams, null));\n\n    let paramsToUrl = [...updatedParams];\n\n    if (paginationConfig?.type === 'infinite-scroll') {\n      paramsToUrl = paramsToUrl.filter(param => !['page', 'limit'].includes(param.name));\n    }\n\n    // Building query string\n    const queryState: string = paramsToUrl.map((queryParam, idx) => {\n      let value = queryParam.value;\n\n      if (queryParam.type === 'select' && value === '-- Select --') {\n          // default value means nothing was selected and thus we explicitly\n          // empty out the value in this case; otherwise the string '-- Select --'\n          // is used as the value for the given queryParams\n          value = '';\n      }\n\n      return `${idx === 0 ? '?' : ''}${queryParam.name}=${encodeURIComponent(value || '')}`;\n    }).join('&');\n\n    // Pushing query state to url\n    if (page && queryState) {\n      push(queryState);\n    }\n  }\n\n  function getUpdatedPaginationState(updatedParams: IConfigInputField[], result: any, total?: number): IPaginationState | undefined {\n    if (!paginationConfig) {\n      return;\n    }\n\n    if(isQueryPagination(paginationConfig)) {\n      if(pagination && !isQueryPaginationState(pagination)) {\n        throw new Error('unexpected pagination source ' + pagination.source)\n      }\n      const newState: IQueryPaginationState = pagination ? pagination : {\n        source: 'query',\n        type: paginationConfig.type,\n        page: parseInt(paginationConfig.params?.page?.value || '1'),\n        limit: parseInt(paginationConfig.params?.limit?.value || '10'),\n        descending: paginationConfig.params?.descending?.value === 'true' || false,\n        hasPreviousPage: false,\n        hasNextPage: false,\n        sortBy: paginationConfig.params?.sortBy?.value,\n      };\n\n      newState.total = total || pagination?.total;\n      newState.page = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.page?.name)?.value) || newState.page;\n      newState.limit = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.limit?.name)?.value) || newState.limit;\n      newState.descending = updatedParams.find(param => param.name === paginationConfig?.params?.descending?.name)?.value === 'true' || newState.descending;\n      newState.sortBy = updatedParams.find(param => param.name === paginationConfig?.params?.sortBy?.name)?.value || newState.sortBy;\n      newState.hasPreviousPage = paginationHelpers.hasPreviousPage(newState.page);\n      newState.hasNextPage = paginationHelpers.hasNextPage(newState.page, newState.limit, newState.total);\n      return newState;\n    } else if(isJSONBodyPagination(paginationConfig)) {\n      if(pagination && !isJSONBodyPaginationState(pagination)) {\n        throw new Error('unexpected pagination source ' + pagination.source)\n      }\n      const newState: IJSONBodyPaginationState = pagination ? pagination : {\n        source: 'json-body',\n        type: paginationConfig.type,\n        next: result[paginationConfig.params.nextPath || 'next'],\n        previous: result[paginationConfig.params.prevPath || 'previous'],\n        hasNextPage: !!result[paginationConfig.params.nextPath || 'next'],\n        hasPreviousPage: !!result[paginationConfig.params.prevPath || 'previous'],\n        limit: parseInt(paginationConfig.params?.limit?.value || '10'),\n        total: result[paginationConfig.params.countPath || 'count']\n      };\n      if(result) {\n        newState.next = result[paginationConfig.params.nextPath || 'next'];\n        newState.previous = result[paginationConfig.params.prevPath || 'previous'];\n        newState.hasNextPage = !!result[paginationConfig.params.nextPath || 'next'];\n        newState.hasPreviousPage = !!result[paginationConfig.params.prevPath || 'previous'];\n        newState.total = result[paginationConfig.params.countPath || 'count'];\n      }\n      newState.limit = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.limit?.name)?.value) || newState.limit;\n      return newState;\n    } else {\n      throw new Error('unrecognized pagination source');\n    }\n  }\n\n  function renderItemsUI() {\n    if (loading) {\n      return <Loader />;\n    }\n\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\n    const fieldsToFilter = fields.filter((field) => (field.filterable)).map((field) => field.name);\n    let filteredItems = items;\n\n    if (filter && fieldsToFilter.length) {\n      filteredItems = items.filter((item) => {\n        let passFilter = false;\n        fieldsToFilter.forEach((fieldName) => {\n          const value = item[fieldName];\n          if (typeof value === 'string' && value.toLowerCase().indexOf(filter) >= 0) {\n            passFilter = true;\n          }\n        })\n        return passFilter;\n      });\n    }\n\n    if (!filteredItems.length) {\n      return <div className=\"app-error\">Nothing to see here. Result is empty.</div>;\n    }\n\n    const getNextPage = paginationConfig ? () => {\n      if(isQueryPagination(paginationConfig)) {\n        if(pagination && !isQueryPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source)\n        }\n        if (pagination?.page && queryParams.length > 0) {\n          const newPage = pagination?.page + 1;\n          const updatedParams = queryParams.map((param) => {\n            if (param.name === paginationConfig.params?.page?.name) {\n              return {\n                ...param,\n                value: newPage\n              }\n            }\n            return param;\n          });\n          submitQueryParams(updatedParams);\n        }\n      } else if(isJSONBodyPagination(paginationConfig)) {\n        if(pagination && !isJSONBodyPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source)\n        }\n        if(!getAllConfig || !pagination?.next) {\n          return;\n        }\n        const { requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\n        fetchPageData(\n          {\n            actualMethod: actualMethod,\n            url: pagination.next,\n            requestHeaders: requestHeaders,\n            dataPath: dataPath,\n            dataTransform: dataTransform,\n            sortBy: sortBy\n          }\n        )\n      } else {\n        throw new Error('unrecognized pagination source');\n      }\n    } : null;\n\n    const getPreviousPage = paginationConfig ? () => {\n      if(isQueryPagination(paginationConfig)) {\n        if(pagination && !isQueryPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source)\n        }\n        if (pagination?.page && pagination.page > 1 && queryParams.length > 0) {\n          const newPage = pagination?.page - 1;\n          const updatedParams = queryParams.map((param) => {\n            if (param.name === paginationConfig.params?.page?.name) {\n              return {\n                ...param,\n                value: newPage\n              }\n            }\n            return param;\n          });\n          submitQueryParams(updatedParams);\n        }\n      } else if(isJSONBodyPagination(paginationConfig)) {\n        if(pagination && !isJSONBodyPaginationState(pagination)) {\n          throw new Error('unexpected pagination source ' + pagination.source)\n        }\n        if(!getAllConfig || !pagination?.previous) {\n          return;\n        }\n        const { requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\n        fetchPageData(\n          {\n            actualMethod: actualMethod,\n            url: pagination.previous,\n            requestHeaders: requestHeaders,\n            dataPath: dataPath,\n            dataTransform: dataTransform,\n            sortBy: sortBy\n          }\n        )\n      } else {\n        throw new Error('unrecognized pagination source');\n      }\n    } : null;\n\n    const callbacks = {\n      delete: deleteConfig ? deleteItem : null,\n      put: putConfig ? openEditPopup : null,\n      action: customActions.length ? openCustomActionPopup : () => { },\n      getNextPage,\n      getPreviousPage,\n    };\n\n    if (getAllConfig?.display.type === 'cards') {\n      return (\n        <Cards\n          pagination={pagination}\n          callbacks={callbacks}\n          fields={fields}\n          items={filteredItems}\n          customActions={customActions}\n          customLabels={customLabels}\n        />\n      );\n    }\n\n    return (\n      <Table\n        pagination={pagination}\n        callbacks={callbacks}\n        fields={fields}\n        items={filteredItems}\n        customActions={customActions}\n        customLabels={customLabels}\n      />\n    );\n  }\n\n  function renderPaginationStateLabel() {\n    if (loading || !items.length) {\n      return;\n    }\n    \n    if(!pagination || isQueryPaginationState(pagination)) {\n      const currentCountFrom = (((pagination?.page || 1) - 1) * (pagination?.limit || 10)) + 1;\n      const currentCountTo = currentCountFrom + items.length - 1;\n      let label: string = `Showing results ${currentCountFrom}-${currentCountTo} out of ${pagination?.total} items`;\n\n      if (pagination?.type === 'infinite-scroll') {\n        label = `Showing ${pagination?.total} items`;\n      }\n\n      if (customLabels?.pagination?.itemsCount) {\n        label = customLabels?.pagination?.itemsCount\n                .replace(':currentCountFrom', currentCountFrom as any)\n                .replace(':currentCountTo', currentCountFrom as any)\n                .replace(':totalCount', pagination?.total as any);\n      }\n\n      return (\n        <p className=\"center pagination-state\">\n          {label}\n        </p>\n      );\n    }\n    if(isJSONBodyPaginationState(pagination)) {\n      // TODO: extract start end end in a meaningful manner from the API\n      // this is not something that id based pagination APIs support generally\n      let label: string = `Total Results: ${pagination?.total}`;\n      if (pagination?.type === 'infinite-scroll') {\n        label = `Showing ${pagination?.total} items`;\n      }\n\n      if (customLabels?.pagination?.itemsCount) {\n        label = customLabels?.pagination?.itemsCount\n                .replace(':totalCount', pagination?.total as any);\n      }\n\n      return (\n        <p className=\"center pagination-state\">\n          {label}\n        </p>\n      );\n    }\n  }\n\n  function renderPageContent() {\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\n    const fieldsToFilter = fields.filter((field) => (field.filterable)).map((field) => field.name);\n\n    return (\n      <React.Fragment>\n        <QueryParams\n          initialParams={queryParams}\n          paginationConfig={paginationConfig}\n          submitCallback={submitQueryParams}\n        />\n        {\n          fieldsToFilter.length > 0 &&\n          <FilterField onChange={setFilter} />\n        }\n        {\n          pagination?.total &&\n          renderPaginationStateLabel()\n        }\n        {\n          error ?\n          <div className=\"app-error\">{error}</div> :\n          renderItemsUI()\n        }\n      </React.Fragment>\n    )\n  }\n\n  useEffect(() => {\n    const nextActivePage: IConfigPage | null = context?.config?.pages?.filter((p, pIdx) => p.id === page || (pIdx + 1) === parseInt(page || ''))[0] || null;\n    context.setActivePage(nextActivePage);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page]);\n\n  useEffect(() => {\n    const { initQueryParams, initialPagination } = buildInitQueryParamsAndPaginationState(getAllConfig?.queryParams || [], paginationConfig);\n\n    setItems([]);\n    setQueryParams(extractQueryParams(initQueryParams));\n    setPagination(initialPagination);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activePage]);\n\n  useEffect(() => {\n    // Load data when query params \n    getAllRequest();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [queryParams]);\n\n  return (\n    <div className=\"app-page\">\n      <header className=\"app-page-header\">\n        <hgroup>\n          <h2>{activePage?.name}</h2>\n          {\n            activePage?.description &&\n            <h4>{activePage?.description}</h4>\n          }\n        </hgroup>\n        {\n          postConfig &&\n          <Button className=\"add-item\" color=\"green\" onClick={() => setOpenedPopup({ type: 'add', title: addItemFormTitle, config: postConfig, submitCallback: addItem })}>{addItemLabel}</Button>\n        }\n      </header>\n      <main className=\"app-page-content\">\n        {renderPageContent()}\n      </main>\n      {\n        openedPopup &&\n        <FormPopup\n          title={openedPopup.title}\n          closeCallback={closeFormPopup}\n          submitCallback={openedPopup.submitCallback}\n          fields={openedPopup.config?.fields || []}\n          rawData={openedPopup.rawData}\n          getSingleConfig={openedPopup.getSingleConfig}\n          methodConfig={openedPopup.config}\n        />\n      }\n    </div>\n  );\n}\n\nexport const Page = withAppContext(PageComp);\n","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { IAppContext } from '../app.context';\nimport { withAppContext } from '../withContext/withContext.comp';\nimport { Button } from '../button/button.comp';\n\nimport './navigation.scss';\n\ninterface IProps {\n  context: IAppContext\n}\n\nconst NavigationComp = ({ context: { config } }: IProps) => {\n  const [isOpened, setIsOpened] = useState<boolean>(false);\n\n  return (\n    <nav className=\"app-nav\">\n      <Button className=\"app-nav-opener\" onClick={() => setIsOpened(!isOpened)}>\n        {\n          isOpened ? \n          <i className=\"fa fa-times\" aria-hidden=\"true\"></i> : \n          <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\n        }\n      </Button>\n\n      <div className={`app-nav-wrapper ${isOpened ? 'opened' : ''}`}>\n        <div className=\"app-nav-links\">\n          {\n            (config?.pages || []).map((page, idx) => (\n              <NavLink to={`/${page.id || idx + 1}`} activeClassName=\"active\" key={`page_${idx}`} onClick={() => setIsOpened(false)}>{page.name}</NavLink>\n            ))\n          }\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport const Navigation = withAppContext(NavigationComp);","import React from 'react';\nimport { ICustomStyles } from '../../common/models/config.model';\n\ninterface IProps {\n  styles: ICustomStyles\n}\n\nexport const CustomStyles = ({ styles }: IProps) => {\n  const cssVars = styles.vars || {};\n  const arr = [];\n  \n  for (const key in cssVars) {\n    arr.push(`--${key}: ${(cssVars as any)[key]}`);\n  }\n\n  return (\n    <style dangerouslySetInnerHTML={{ __html: `\n      :root {\n        ${arr.join(';')}\n      }\n    ` }}>\n    </style>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport ConfigService from '../services/config.service';\nimport { IConfig, IConfigPage } from '../common/models/config.model';\nimport { Page } from '../components/page/page.comp';\nimport { Navigation } from '../components/navigation/navigation.comp';\nimport { AppContext } from './app.context';\nimport HttpService from '../services/http.service';\nimport { CustomStyles } from './customStyles/customStyles.comp';\n\nimport './app.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst httpService = new HttpService();\nconst defaultAppName: string = 'RESTool App';\n\nfunction changeFavicon(src: string) {\n  const link = document.createElement('link');\n  const oldLink = document.getElementById('favicon');\n  link.id = 'favicon';\n  link.rel = 'shortcut icon';\n  link.href = src;\n  if (oldLink) {\n   document.head.removeChild(oldLink);\n  }\n  document.head.appendChild(link);\n }\n\nfunction App() {\n  const [firstLoad, setFirstLoad] = useState<boolean>(true);\n  const [config, setConfig] = useState<IConfig | null>(null);\n  const [activePage, setActivePage] = useState<IConfigPage | null>(config?.pages?.[0] || null);\n  const [error, setError] = useState<string | null>(null);\n  const appName: string = config?.name || defaultAppName;\n  \n  async function loadConfig(url?: string): Promise<void> {\n    try {\n      const windowConfig = (window as any).RESTool?.config;\n      let remoteConfig: IConfig; \n      // Try to load config from window object first\n      if (!url && windowConfig) {\n        remoteConfig = Object.assign({}, windowConfig, {});\n      } else {\n        remoteConfig = url ? await ConfigService.getRemoteConfig(url) : await ConfigService.loadDefaultConfig();\n      }\n\n      // Setting global config for httpService\n      httpService.baseUrl = remoteConfig.baseUrl || '';\n      httpService.errorMessageDataPath = remoteConfig.errorMessageDataPath || '';\n      httpService.unauthorizedRedirectUrl = remoteConfig.unauthorizedRedirectUrl || '';\n      httpService.requestHeaders = remoteConfig.requestHeaders || {};\n      document.title = remoteConfig.name || defaultAppName;\n\n      if (remoteConfig?.favicon) {\n        changeFavicon(remoteConfig.favicon);\n      }\n\n      if (remoteConfig?.remoteUrl) {\n        return await loadConfig(remoteConfig.remoteUrl);\n      }\n\n      setConfig(remoteConfig);\n    } catch (e) {\n      console.error('Could not load config file', e);\n    }\n\n    setFirstLoad(false);\n  }\n\n  function scrollToTop(scrollDuration: number = 250) {\n    var cosParameter = window.scrollY / 2,\n    scrollCount = 0,\n    oldTimestamp = performance.now();\n\n    function step (newTimestamp: number) {\n      scrollCount += Math.PI / (scrollDuration / (newTimestamp - oldTimestamp));\n\n      if (scrollCount >= Math.PI) {\n        window.scrollTo(0, 0);\n      }\n\n      if (window.scrollY === 0) {\n        return;\n      }\n\n      window.scrollTo(0, Math.round(cosParameter + cosParameter * Math.cos(scrollCount)));\n      oldTimestamp = newTimestamp;\n      window.requestAnimationFrame(step);\n    }\n\n    window.requestAnimationFrame(step);\n  }\n\n  useEffect(() => {\n    loadConfig();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const { isValid, errorMessage } = ConfigService.validateConfig(config);\n\n    if (!isValid) {\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return;\n    }\n  }, [config]);\n\n  return (\n    <div className=\"restool-app\">\n      {\n        !config ?\n        <div className=\"app-error\">\n          {firstLoad ? 'Loading Configuration...' : 'Could not find config file.'}\n        </div> :\n        <AppContext.Provider value={{ config, activePage, setActivePage, error, setError, httpService }}>\n          {\n            config.customStyles &&\n            <CustomStyles\n              styles={config.customStyles}\n            />\n          }\n          <Router>\n            <aside>\n              <h1 title={appName} onClick={() => scrollToTop()}>{appName}</h1>\n              {\n                <Navigation />\n              }\n            </aside>\n            {\n              config &&\n              <Switch>\n                <Route exact path=\"/:page\" component={Page} />\n                <Redirect path=\"/\" to={`/${config?.pages?.[0]?.id || '1'}`} />\n              </Switch>\n            }\n            <ToastContainer\n              position={toast.POSITION.TOP_CENTER}\n              autoClose={4000}\n              draggable={false}\n            />\n          </Router>\n        </AppContext.Provider>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}